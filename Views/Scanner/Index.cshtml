@{
    ViewData["Title"] = "Scanner";
    Layout = null;
}

<!-- Include the html5-qrcode library from a CDN -->
<script src="https://unpkg.com/html5-qrcode" type="text/javascript"></script>

<style>
    body {
    margin: 0;
    padding: 0;
    font-family: 'Poppins', sans-serif; /* Ensure you have Poppins loaded */
    background-color: #f4f1ea; /* If needed, keep or adjust your background color */
}
/* Inventory Container */
.inventory-container {
    max-width: 1200px;
    margin: 1rem auto;
    padding: 1rem;
    background-color: #f4f1ea; /* Changed to beige */
    border-radius: 12px;
    border: 1px solid #e0dcd3; /* Added beige border */
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

.back-to-dashboard {
    margin-bottom: 1rem;
}

.back-btn {
    padding: 0.5rem 1rem;
    background-color: #0d0063; /* Changed to NTT dark blue */
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
}

h1 {
    font-size: clamp(1.5rem, 4vw, 2.5rem);
    margin: 1rem 0;
    text-align: center;
    color: #0d0063; /* Changed to NTT dark blue */
}

.date-range {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: 1rem;
    margin: 1rem 0;
    justify-content: center;
}

.date-range label {
    font-size: 1rem;
    white-space: nowrap;
    color: #333333;
}

.date-range input[type="date"] {
    padding: 0.5rem;
    border: 1px solid #e0dcd3;
    border-radius: 4px;
    background-color: #faf9f6; /* Changed to lighter beige */
    color: #333333;
    max-width: 150px;
}

#downloadBtn {
    padding: 0.5rem 1rem;
    background-color: #0d0063; /* Changed to NTT dark blue */
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    white-space: nowrap;
}

.table-container {
    overflow-x: auto;
    margin: 1rem 0;
    background-color: #ffffff;
    border-radius: 8px;
    border: 1px solid #e0dcd3;
}

#logTable {
    width: 100%;
    border-collapse: collapse;
    min-width: 600px;
}

#logTable th,
#logTable td {
    padding: 0.75rem;
    text-align: left;
    border-bottom: 1px solid #e0dcd3; /* Changed to beige */
}

#logTable th {
    background-color: #0d0063; /* Changed to NTT dark blue */
    color: white;
    font-weight: 600;
    white-space: nowrap;
}

#logTable tbody tr:nth-child(even) {
    background-color: #faf9f6; /* Changed to lighter beige */
}

/* Mobile Optimizations */
@@media screen and (max-width: 768px) {
    .navbar {
        padding: 0.75rem;
    }

    .nav-profile {
        width: 100%;
        justify-content: center;
    }

    .date-range {
        flex-direction: column;
        align-items: stretch;
    }

    .date-range input[type="date"] {
        max-width: 100%;
    }

    .inventory-container {
        margin: 0.5rem;
        padding: 0.75rem;
    }

    #downloadBtn {
        width: 100%;
        margin-top: 1rem;
    }

    .table-container {
        margin: 0.5rem -0.75rem;
        padding: 0 0.75rem;
    }

    #logTable {
        font-size: 0.9rem;
    }

    #logTable th,
    #logTable td {
        padding: 0.5rem;
    }
}

/* Small Screen Optimizations */
@@media screen and (max-width: 480px) {
    .profile-info {
        flex-direction: column;
        align-items: center;
        text-align: center;
        width: 100%;
    }

    .logout-btn {
        width: 100%;
        text-align: center;
    }

    h1 {
        font-size: 1.5rem;
    }

    .date-range label {
        text-align: center;
        width: 100%;
    }
}

/* Print Styles */
@@media print {
    .navbar,
    .back-to-dashboard,
    #downloadBtn {
        display: none;
    }

    body {
        background: white;
        color: black;
    }

    .inventory-container {
        background: none;
        box-shadow: none;
        margin: 0;
        padding: 0;
    }

    #logTable th {
        background-color: #f0f0f0;
        color: black;
    }

    #logTable tbody tr:nth-child(even) {
        background-color: #f9f9f9;
    }
}

/* Main Content Styles */
.content {
    max-width: 1200px;       /* Adjust as desired (e.g., 80%, 1000px, etc.) */
    margin: 0 auto;          /* Centers the container horizontally */
    padding: 2rem;           /* Even spacing on all sides */
    box-sizing: border-box;  /* Ensures padding doesn’t push out the box width */
}

.details-container {
    background: #f4f1ea;
    border-radius: 12px;
    padding: 2rem;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    border: 1px solid #e0dcd3;
    /* Remove or adjust margin here if it’s causing off-center alignment */
    /* margin: 0 auto; (not strictly needed if .content is already centered) */
}

.header {
    display: flex;
    align-items: center;
    gap: 2rem;
    margin-bottom: 2rem;
}

.back-btn {
    padding: 0.8rem 1.5rem;
    background: #0d0063;
    border: none;
    border-radius: 8px;
    color: white;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    transition: all 0.3s ease;
}

.back-btn:hover {
    background: #0a004d;
}

/* Status Styles */
.status {
    text-align: center;
    padding: 1rem;
    border-radius: 8px;
    margin-bottom: 2rem;
    font-weight: 500;
    color: white;
}

.status.ready { background: #0d0063; }
.status.checked-in { background: #28a745; }
.status.checked-out { background: #dc3545; }

/* Scan Info Styles */
.scan-info {
    display: flex;
    flex-direction: column;
    gap: 2rem;
}

.info-card {
    background: #faf9f6;
    border-radius: 8px;
    padding: 1.5rem;
    border: 1px solid #e0dcd3;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
}

.card-header {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1rem;
    color: #0d0063;
}

.card-header h2 {
    font-size: 1.2rem;
    margin: 0;
}

/* Scanned Data Styles */
.card-body {
    color: #333333;
    word-break: break-word;
    padding: 0.5rem;
}

.scanned-data-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.scanned-data-item {
    display: flex;
    flex-direction: column;
    padding: 1rem;
    border-bottom: 1px solid #e0dcd3;
    background: #ffffff;
}

.scanned-data-item:last-child {
    border-bottom: none;
}

.scanned-data-label {
    color: #0d0063;
    font-weight: 500;
    margin-bottom: 0.25rem;
}

.scanned-data-value {
    padding-left: 1rem;
    color: #333333;
}

/* Grid Layout */
.details-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1.5rem;
}

/* Action Buttons */
.action-buttons {
    display: flex;
    gap: 1rem;
}

.action-btn {
    flex: 1;
    padding: 1rem;
    border: none;
    border-radius: 8px;
    color: white;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    font-size: 1.1rem;
    transition: all 0.3s ease;
}

.action-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

.check-in {
    background-color: #28a745;
}

.check-in:hover:not(:disabled) {
    background-color: #218838;
}

.check-out {
    background-color: #dc3545;
}

.check-out:hover:not(:disabled) {
    background-color: #c82333;
}

.scan-new {
    background-color: #0d0063;
}

.scan-new:hover:not(:disabled) {
    background-color: #0a004d;
    transform: translateY(-2px);
}

/* Modal Styles */
.modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(244, 241, 234, 0.9);
    z-index: 1000;
    backdrop-filter: blur(4px);
}

.modal-content {
    background: #f4f1ea;
    margin: 2rem auto;
    padding: 2rem;
    border-radius: 12px;
    max-width: 600px;
    width: 100%;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    border: 1px solid #e0dcd3;
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid #e0dcd3;
}

.close-modal {
    background: none;
    border: none;
    color: #333333;
    font-size: 1.8rem;
    cursor: pointer;
    padding: 0.5rem;
    opacity: 0.8;
    transition: opacity 0.3s;
}

.close-modal:hover {
    opacity: 1;
}

/* QR Scanner Styles */
#reader {
    width: 100% !important;
    border-radius: 8px;
    overflow: hidden;
    background: #faf9f6;
    border: 1px solid #e0dcd3;
}

#reader__dashboard {
    padding: 1rem !important;
    background: #faf9f6 !important;
    border: none !important;
}

#reader__dashboard_section_csr {
    margin: 10px 0 !important;
}

#reader__dashboard_section_csr button {
    padding: 8px 16px !important;
    background: #0d0063 !important;
    color: white !important;
    border: none !important;
    border-radius: 4px !important;
}

/* Notification Styles */
.notification {
    position: fixed;
    top: 20px;
    right: 20px;
    padding: 15px 25px;
    border-radius: 8px;
    color: white;
    z-index: 1000;
    animation: slideIn 0.3s ease;
}

.notification.success { background-color: #28a745; }
.notification.error { background-color: #dc3545; }
.notification.info { background-color: #0d0063; }

@@keyframes slideIn {
    from { transform: translateX(100%); opacity: 0; }
    to { transform: translateX(0); opacity: 1; }
}

/* Mobile Responsiveness */
@@media (max-width: 768px) {
    .navbar {
        padding: 1rem;
        flex-direction: column;
        gap: 1rem;
    }

    .nav-profile {
        width: 100%;
        justify-content: center;
        flex-direction: column;
        gap: 1rem;
    }

    .content { padding: 1rem; }
    .details-container { padding: 1rem; }
    
    .header {
        flex-direction: column;
        align-items: flex-start;
        gap: 1rem;
    }

    .action-buttons {
        flex-direction: column;
    }

    .details-grid {
        grid-template-columns: 1fr;
    }

    .back-btn, .logout-btn {
        width: 100%;
        justify-content: center;
    }

    .profile-info {
        width: 100%;
        flex-direction: column;
        align-items: center;
        text-align: center;
    }

    .modal-content {
        margin: 1rem;
        width: calc(100% - 2rem);
    }
}

/* Small Screen Adjustments */
@@media (max-width: 480px) {
    .scanned-data-label { font-size: 0.85rem; }
    .scanned-data-value {
        font-size: 1rem;
        padding-left: 0.5rem;
    }
    .card-body { padding: 0.25rem; }
    .info-card { padding: 1rem; }
    .modal-header h2 { font-size: 1rem; }
    .close-modal { font-size: 1.5rem; }
}

/* Print Styles */
@@media print {
    .navbar, .back-btn, .action-buttons {
        display: none;
    }
}

.SplashHeader_root__JxGNa{
    max-width: auto;
    margin: 0 auto;
    width: 100%;
    height:10.75rem;
    overflow:hidden;
    position:relative;
    padding-bottom: 2rem;
    background: #f4f1ea;
}

.SplashHeader_image__eCNQN {
    height:100%;
    object-fit:cover;
    width:100%;
    vertical-align: bottom
}

.SplashHeader_content__QLLrO{
    left:0;
    margin:0 auto;
    position:absolute;
    right:0;
    top:50%;
    -webkit-transform:translateY(-50%);
    transform:translateY(-50%)
}

.SplashHeader_text__Gd7fp{
    font-family:var(--sfHeading_FontFamily);
    font-size:3rem;
    font-weight:900;
    margin:3rem;
    text-align:center;
    color: #0d0063;
}

.placeholderShimmer{
    -webkit-animation-duration:2s;
    animation-duration:2s;
    -webkit-animation-fill-mode:forwards;
    animation-fill-mode:forwards;
    -webkit-animation-iteration-count:infinite;
    animation-iteration-count:infinite;
    -webkit-animation-name:placeholderShimmer;
    animation-name:placeholderShimmer;
    -webkit-animation-timing-function:linear;
    animation-timing-function:linear;
    background:#e0e0e0;
    background-image:linear-gradient(90deg,#e0e0e0 0,#e0e0e0 35%,#d3d3d3 50%,#e0e0e0 65%,#e0e0e0);
    background-repeat:no-repeat;
    background-size:300vw;
    opacity:.5;
    position:relative
}

@@-webkit-keyframes placeholderShimmer{0%{background-position-x:100%}to{background-position-x:0}}
@@keyframes placeholderShimmer{0%{background-position-x:100%}to{background-position-x:0}}
</style>


<!-- 
    Scanner Modal - opens automatically on page load (see script below).
    This is your initial camera feed for scanning the QR code.
-->
@* <div id="scannerModal" class="scanner-modal">
    <div class="scanner-content">
        <div class="scanner-header">
            <h2>
                <i class="fas fa-qrcode"></i>
                Scan QR Code
            </h2>
            <button id="scannerClose" class="scanner-close">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="qr-reader-container">
            <!-- html5-qrcode will render the camera feed into this div -->
            <div id="qrReader"></div>
            <div id="scannerLoading" class="scanner-loading">
                <i class="fas fa-spinner fa-spin"></i>
                <span>Initializing camera...</span>
            </div>
        </div>
    </div>
</div> *@

<main class="content">
    <div class="details-container">
        <!-- Header -->
        <div class="header">
            <button class="back-btn" onclick="history.back()">
                <i class="fas fa-arrow-left"></i>
                Back
            </button>
            <h1>Scan Details</h1>
        </div>

        <!-- Status -->
        <div id="currentStatus" class="status ready">Ready to Check In</div>

        <!-- Scan Info -->
        <div class="scan-info">
            <!-- Scanned Data Card -->
            <div class="info-card">
                <div class="card-header">
                    <i class="fas fa-qrcode"></i>
                    <h2>Scanned Data</h2>
                </div>
                <div class="card-body">
                    <!-- Will display the decoded text here -->
                    <div id="scannedContent" class="scanned-data-list"></div>
                </div>
            </div>

            <!-- Details Grid -->
            <div class="details-grid">
                <!-- Check In Time -->
                <div class="info-card">
                    <div class="card-header">
                        <i class="fas fa-clock"></i>
                        <h2>Check In Time</h2>
                    </div>
                    <div class="card-body">
                        <p id="timeDisplay">Not checked in</p>
                    </div>
                </div>

                <!-- Check Out Time -->
                <div class="info-card">
                    <div class="card-header">
                        <i class="fas fa-clock"></i>
                        <h2>Check Out Time</h2>
                    </div>
                    <div class="card-body">
                        <p id="checkOutTimeDisplay">Not checked out</p>
                    </div>
                </div>

                <!-- Duration -->
                <div class="info-card">
                    <div class="card-header">
                        <i class="fas fa-hourglass-half"></i>
                        <h2>Duration</h2>
                    </div>
                    <div class="card-body">
                        <p id="duration">Not checked in</p>
                    </div>
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="action-buttons">
                <button id="checkInBtn" class="action-btn check-in">
                    <i class="fas fa-sign-in-alt"></i>
                    Check In
                </button>
                <button id="checkOutBtn" class="action-btn check-out" disabled>
                    <i class="fas fa-sign-out-alt"></i>
                    Check Out
                </button>
                <button id="reportMismatchBtn" class="action-btn check-out">
                    <i class="fas fa-exclamation-triangle"></i>
                    Report Mismatch
                </button>
                <button id="scanNewBtn" class="action-btn scan-new">
                    <i class="fas fa-qrcode"></i>
                    Scan Another Device
                </button>
            </div>
        </div>
    </div>

    <!-- Secondary QR Scanner Modal (optional) -->
    <div id="qrModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2><i class="fas fa-qrcode"></i> Scan QR Code</h2>
                <button class="close-modal" onclick="closeModal('qrModal')">&times;</button>
            </div>
            <div class="modal-body">
                <div id="reader"></div>
                <div id="scannerMessage" class="scanner-message">
                    Initializing camera...
                </div>
            </div>
        </div>
    </div>

    <!-- Manual Check In Modal -->
    <div id="manualCheckInModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2><i class="fas fa-clock"></i> Manual Check In</h2>
                <button class="close-modal" onclick="closeModal('manualCheckInModal')">&times;</button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="manualCheckInTime">Enter Check-in Time:</label>
                    <input type="datetime-local" id="manualCheckInTime" class="form-input" required />
                    <div class="error-message" id="checkInError"></div>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn-secondary" onclick="closeModal('manualCheckInModal')">Cancel</button>
                <button class="btn-primary" onclick="handleManualCheckIn()">Submit</button>
            </div>
        </div>
    </div>

    <!-- Manual Check Out Modal -->
    <div id="manualCheckOutModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2><i class="fas fa-clock"></i> Manual Check Out</h2>
                <button class="close-modal" onclick="closeModal('manualCheckOutModal')">&times;</button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="manualCheckOutTime">Enter Check-out Time:</label>
                    <input type="datetime-local" id="manualCheckOutTime" class="form-input" required />
                    <div class="error-message" id="checkOutError"></div>
                    <div class="warning-message" id="checkOutWarning"></div>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn-secondary" onclick="closeModal('manualCheckOutModal')">Cancel</button>
                <button class="btn-primary" onclick="handleManualCheckOut()">Submit</button>
            </div>
        </div>
    </div>

    <!-- Mismatch Modal -->
    <div id="mismatchModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2><i class="fas fa-exclamation-triangle"></i> Asset Mismatch</h2>
                <button class="close-modal" onclick="closeModal('mismatchModal')">&times;</button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="mismatchEmployeeId">Enter Employee ID checking out the asset:</label>
                    <input type="text" id="mismatchEmployeeId" class="form-input" required />
                    <div class="error-message" id="mismatchError"></div>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn-secondary" onclick="closeModal('mismatchModal')">Cancel</button>
                <button class="btn-primary" onclick="handleMismatch()">Submit</button>
            </div>
        </div>
    </div>
</main>

<script>
    /********************************************************************
     * 1. Modal Open/Close Functions
     ********************************************************************/
    function openModal(modalId) {
        document.getElementById(modalId).style.display = "block";
    }
    function closeModal(modalId) {
        document.getElementById(modalId).style.display = "none";
    }

    // Close the main scanner modal
    const scannerCloseBtn = document.getElementById("scannerClose");
    if (scannerCloseBtn) {
        scannerCloseBtn.addEventListener("click", () => {
            closeModal("scannerModal");
        });
    }

    // Close modals when clicking outside content (optional)
    window.addEventListener("click", function(event) {
        const modals = document.querySelectorAll(".modal, .scanner-modal");
        modals.forEach(modal => {
            if (event.target === modal) {
                modal.style.display = "none";
            }
        });
    });

    @* /********************************************************************
     * 2. START the Html5Qrcode Scanner
     *    - Called automatically on page load
     ********************************************************************/
    document.addEventListener("DOMContentLoaded", () => {
        // Open the scanner modal
        openModal("scannerModal");
        startScanner();
    });

    function startScanner() {
        // Use Html5QrcodeScanner to render the camera feed in #qrReader
        const html5QrcodeScanner = new Html5QrcodeScanner(
            "qrReader",
            { fps: 10, qrbox: 250 },
            /* verbose= */ false
        );

        // Called when a QR code is successfully scanned
        function onScanSuccess(decodedText, decodedResult) {
            // Put the decoded text in the scannedContent div
            document.getElementById("scannedContent").innerText = decodedText;

            // Optionally hide the loading overlay once scanning starts
            document.getElementById("scannerLoading").style.display = "none";

            // If you only want one successful scan, you can stop scanning:
            // html5QrcodeScanner.clear();
            // closeModal("scannerModal");
        }

        // Called on scan error (typically ignore or log)
        function onScanError(errorMessage) {
            // console.warn("Scan error:", errorMessage);
        }

        // Render the scanner UI
        html5QrcodeScanner.render(onScanSuccess, onScanError);
    } *@

    /********************************************************************
     * 3. Button Event Handlers
     ********************************************************************/
    const scanNewBtn = document.getElementById("scanNewBtn");
    if (scanNewBtn) {
        scanNewBtn.addEventListener("click", () => {
            // Re-open the scanner modal to scan again
            openModal("scannerModal");
            // If you want to re-init scanning each time:
            // startScanner();
        });
    }

    const reportMismatchBtn = document.getElementById("reportMismatchBtn");
    if (reportMismatchBtn) {
        reportMismatchBtn.addEventListener("click", () => {
            openModal("mismatchModal");
        });
    }

    const checkInBtn = document.getElementById("checkInBtn");
    if (checkInBtn) {
        checkInBtn.addEventListener("click", () => {
            const now = new Date().toLocaleString();
            document.getElementById("timeDisplay").innerText = now;
            document.getElementById("currentStatus").innerText = "Checked In";
            document.getElementById("currentStatus").classList.remove("ready");
            document.getElementById("currentStatus").style.backgroundColor = "#007bff"; // Blue
            checkInBtn.disabled = true;
            document.getElementById("checkOutBtn").disabled = false;
        });
    }

    const checkOutBtn = document.getElementById("checkOutBtn");
    if (checkOutBtn) {
        checkOutBtn.addEventListener("click", () => {
            const now = new Date().toLocaleString();
            document.getElementById("checkOutTimeDisplay").innerText = now;
            document.getElementById("currentStatus").innerText = "Checked Out";
            document.getElementById("currentStatus").style.backgroundColor = "#dc3545"; // Red
            checkOutBtn.disabled = true;

            // Simple duration calculation (placeholder)
            const checkInTime = document.getElementById("timeDisplay").innerText;
            document.getElementById("duration").innerText = `From ${checkInTime} to ${now}`;
        });
    }

    /********************************************************************
     * 4. Manual Check In/Out & Mismatch Functions
     ********************************************************************/
    function handleManualCheckIn() {
        const timeInput = document.getElementById("manualCheckInTime");
        const checkInError = document.getElementById("checkInError");

        if (!timeInput.value) {
            checkInError.innerText = "Please select a check-in time.";
            return;
        }
        checkInError.innerText = "";

        document.getElementById("timeDisplay").innerText = new Date(timeInput.value).toLocaleString();
        document.getElementById("currentStatus").innerText = "Checked In (Manual)";
        document.getElementById("currentStatus").style.backgroundColor = "#007bff";
        document.getElementById("checkInBtn").disabled = true;
        document.getElementById("checkOutBtn").disabled = false;

        closeModal("manualCheckInModal");
    }

    function handleManualCheckOut() {
        const timeInput = document.getElementById("manualCheckOutTime");
        const checkOutError = document.getElementById("checkOutError");
        const checkOutWarning = document.getElementById("checkOutWarning");

        if (!timeInput.value) {
            checkOutError.innerText = "Please select a check-out time.";
            return;
        }
        checkOutError.innerText = "";
        checkOutWarning.innerText = "";

        document.getElementById("checkOutTimeDisplay").innerText = new Date(timeInput.value).toLocaleString();
        document.getElementById("currentStatus").innerText = "Checked Out (Manual)";
        document.getElementById("currentStatus").style.backgroundColor = "#dc3545";
        document.getElementById("checkOutBtn").disabled = true;

        // Simple placeholder for duration
        const checkInTime = document.getElementById("timeDisplay").innerText;
        document.getElementById("duration").innerText =
            `From ${checkInTime} to ${new Date(timeInput.value).toLocaleString()}`;

        closeModal("manualCheckOutModal");
    }

    function handleMismatch() {
        const mismatchEmployeeId = document.getElementById("mismatchEmployeeId").value.trim();
        const mismatchError = document.getElementById("mismatchError");

        if (!mismatchEmployeeId) {
            mismatchError.innerText = "Please enter an Employee ID.";
            return;
        }
        mismatchError.innerText = "";

        // TODO: Add your own mismatch logic here (database, logs, etc.)
        closeModal("mismatchModal");
        alert("Mismatch reported successfully!");
    }
</script>
